name: Build and Release Specialized Packages

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC

permissions:
  contents: write
  packages: write

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Configure GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Delete Existing Releases and Tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MANAGED_TAGS=("BlueTeam-Tools" "Core-ScriptLibrary" "ITSM-Templates-SVR" "ITSM-Templates-WKS" "SysAdmin-Tools" "GPOs-Templates" "READMEs-Files-Package" "All-Repository-Files")
          for tag in "${MANAGED_TAGS[@]}"; do
            if gh release view "$tag" >/dev/null 2>&1; then
              echo "Deleting release and tag: $tag"
              gh release delete "$tag" -y
              git push --delete origin "$tag"
            fi
          done

  build-and-release:
    needs: cleanup-old-releases
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        release_name:
          - BlueTeam-Tools
          - Core-ScriptLibrary
          - ITSM-Templates-SVR
          - ITSM-Templates-WKS
          - SysAdmin-Tools
          - GPOs-Templates
          - READMEs-Files-Package
          - All-Repository-Files

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y zip jq

      - name: Prepare Artifacts Folder
        run: mkdir -p artifacts

      - name: Package ${{ matrix.release_name }}
        run: |
          name="${{ matrix.release_name }}"
          case "$name" in
            GPOs-Templates)
              mkdir -p GPOs-Templates
              cp -r SysAdmin-Tools/GroupPolicyObjects-Templates/* GPOs-Templates/
              cp SysAdmin-Tools/ActiveDirectory-Management/Export-n-Import-GPOsTool.ps1 GPOs-Templates/
              zip -r "artifacts/GPOs-Templates.zip" GPOs-Templates
              ;;
            READMEs-Files-Package)
              mkdir -p READMEs-Files-Package
              cp README.md READMEs-Files-Package/main-README.md
              find . -type f -iname "README.md" ! -path "./README.md" | while read -r file; do
                dir=$(basename "$(dirname "$file")")
                cp "$file" "READMEs-Files-Package/${dir}-README.md"
              done
              zip -r "artifacts/READMEs-Files-Package.zip" READMEs-Files-Package
              ;;
            All-Repository-Files)
              mkdir -p All-Repository-Files
              rsync -a BlueTeam-Tools/ All-Repository-Files/BlueTeam-Tools/
              rsync -a Core-ScriptLibrary/ All-Repository-Files/Core-ScriptLibrary/
              rsync -a ITSM-Templates-SVR/ All-Repository-Files/ITSM-Templates-SVR/
              rsync -a ITSM-Templates-WKS/ All-Repository-Files/ITSM-Templates-WKS/
              rsync -a SysAdmin-Tools/ All-Repository-Files/SysAdmin-Tools/
              zip -r "artifacts/All-Repository-Files.zip" All-Repository-Files
              ;;
            *)
              if [ -d "$name" ]; then
                zip -r "artifacts/$name.zip" "$name"
              else
                echo "Error: Folder '$name' not found"
                exit 1
              fi
              ;;
          esac

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ matrix.release_name }}
          name: ${{ matrix.release_name }}
          body: "Latest release for ${{ matrix.release_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .zip Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.release_name }}.zip
          asset_name: ${{ matrix.release_name }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push .nupkg to GitHub Packages (if exists)
        env:
          GH_PAT_FOR_NUGET: ${{ secrets.GH_PAT_FOR_NUGET }}
        run: |
          if compgen -G "artifacts/*.nupkg" > /dev/null; then
            dotnet nuget push artifacts/*.nupkg \
              --api-key "$GH_PAT_FOR_NUGET" \
              --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              --skip-duplicate
          else
            echo "No .nupkg to push for ${{ matrix.release_name }}"
          fi
