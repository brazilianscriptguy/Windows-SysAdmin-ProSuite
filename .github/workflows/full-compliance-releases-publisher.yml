name: Build and Release Specialized Packages

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC

permissions:
  contents: write
  packages: write

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Auth GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Delete Old Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          MANAGED_TAGS=("BlueTeam-Tools" "Core-ScriptLibrary" "ITSM-Templates-SVR" "ITSM-Templates-WKS" "SysAdmin-Tools" "GPOs-Templates" "READMEs-Files-Package" "All-Repository-Files")
          for tag in "${MANAGED_TAGS[@]}"; do
            releases=$(gh release list --tag "$tag" --limit 100 --json name,tagName,createdAt | jq -r --arg tag "$tag" '.[] | select(.tagName == $tag) | "\(.createdAt) \(.tagName)"')
            if [ -z "$releases" ]; then continue; fi
            sorted=$(echo "$releases" | sort)
            to_delete=$(echo "$sorted" | head -n -1 | awk '{print $2}')
            for tag_to_delete in $to_delete; do
              gh release delete "$tag_to_delete" -y
              git push --delete origin "$tag_to_delete"
            done
          done

  build-and-release:
    needs: cleanup-old-releases
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        release_name:
          - BlueTeam-Tools
          - Core-ScriptLibrary
          - ITSM-Templates-SVR
          - ITSM-Templates-WKS
          - SysAdmin-Tools
          - GPOs-Templates
          - READMEs-Files-Package
          - All-Repository-Files

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh

      - name: Setup GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Lint with PSScriptAnalyzer
        run: |
          mkdir -p analysis-reports
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser; Invoke-ScriptAnalyzer -Path . -Recurse | Out-File -FilePath analysis-reports/PSScriptAnalyzer.txt"

      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: PSScriptAnalyzer-${{ matrix.release_name }}
          path: analysis-reports/PSScriptAnalyzer.txt

      - name: Remove Old Release If Exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "${{ matrix.release_name }}" > /dev/null 2>&1; then
            gh release delete "${{ matrix.release_name }}" -y
            git push --delete origin "${{ matrix.release_name }}"
          fi

      - name: Build and Package ${{ matrix.release_name }}
        run: |
          mkdir -p artifacts
          case "${{ matrix.release_name }}" in
            BlueTeam-Tools)
              zip -r artifacts/BlueTeam-Tools.zip BlueTeam-Tools
              ;;
            Core-ScriptLibrary)
              zip -r artifacts/Core-ScriptLibrary.zip Core-ScriptLibrary
              ;;
            ITSM-Templates-SVR)
              zip -r artifacts/ITSM-Templates-SVR.zip ITSM-Templates-SVR
              ;;
            ITSM-Templates-WKS)
              zip -r artifacts/ITSM-Templates-WKS.zip ITSM-Templates-WKS
              ;;
            SysAdmin-Tools)
              zip -r artifacts/SysAdmin-Tools.zip SysAdmin-Tools
              ;;
            GPOs-Templates)
              mkdir -p GPOs-Templates
              cp -r SysAdmin-Tools/GroupPolicyObjects-Templates/* GPOs-Templates/
              cp SysAdmin-Tools/ActiveDirectory-Management/Export-n-Import-GPOsTool.ps1 GPOs-Templates/
              zip -r artifacts/GPOs-Templates.zip GPOs-Templates
              ;;
            READMEs-Files-Package)
              mkdir -p READMEs-Files-Package
              cp README.md READMEs-Files-Package/main-README.md
              find . -type f -iname "README.md" ! -path "./README.md" | while read -r file; do
                repo_dir=$(dirname "$file")
                repo_name=$(basename "$repo_dir")
                cp "$file" "READMEs-Files-Package/${repo_name}-README.md"
              done
              zip -r artifacts/READMEs-Files-Package.zip READMEs-Files-Package
              ;;
            All-Repository-Files)
              mkdir -p All-Repository-Files
              rsync -av BlueTeam-Tools/ All-Repository-Files/BlueTeam-Tools/
              rsync -av Core-ScriptLibrary/ All-Repository-Files/Core-ScriptLibrary/
              rsync -av ITSM-Templates-WKS/ All-Repository-Files/ITSM-Templates-WKS/
              rsync -av ITSM-Templates-SVR/ All-Repository-Files/ITSM-Templates-SVR/
              rsync -av SysAdmin-Tools/ All-Repository-Files/SysAdmin-Tools/
              zip -r artifacts/All-Repository-Files.zip All-Repository-Files
              ;;
          esac

      - name: Generate Release Notes from CHANGELOG.md
        id: changelog
        run: |
          body="Latest automated specialized release for ${{ matrix.release_name }}."
          if [ -f CHANGELOG.md ]; then
            section=$(awk "/^## ${{ matrix.release_name }}/,/^## /" CHANGELOG.md | sed '1d;$d')
            if [ ! -z "$section" ]; then body="$section"; fi
          fi
          echo "body<<EOF" >> $GITHUB_ENV
          echo "$body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ matrix.release_name }}
          name: ${{ matrix.release_name }}
          body: ${{ env.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .zip Asset to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.release_name }}.zip
          asset_name: ${{ matrix.release_name }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push .nupkg to GitHub Packages (if present)
        run: |
          if compgen -G "artifacts/*.nupkg" > /dev/null; then
            dotnet nuget push artifacts/*.nupkg \
              --api-key "${{ secrets.GH_PAT_FOR_NUGET }}" \
              --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              --skip-duplicate
          else
            echo "⚠️ No .nupkg file found for ${{ matrix.release_name }}. Skipping NuGet push."
          fi
