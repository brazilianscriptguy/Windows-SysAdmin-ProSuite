name: VBScript Syntax Check

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.vbs'
      - '**/*.hta'

  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.vbs'
      - '**/*.hta'

  workflow_dispatch:

jobs:
  vbscript-lint:
    name: VBScript Syntax Validation
    runs-on: windows-latest

    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          path: repo

      - name: üîç Locate VBS and HTA Files (with filtering)
        working-directory: ./repo
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Include *.vbs,*.hta | ForEach-Object {
            if ($_.Extension -eq ".hta") {
              $content = Get-Content $_.FullName -Raw
              if ($content -match '<script\s+language=["'']?VBScript["'']?' -or $content -match '<script\s+type=["'']?text/vbscript["'']?') {
                $_.FullName
              }
            }
            elseif ($_.Extension -eq ".vbs") {
              $_.FullName
            }
          } > vbscript-files.txt

      - name: ‚úÖ Run cscript Syntax Validation and Generate SARIF
        working-directory: ./repo
        shell: pwsh
        run: |
          $sarifPath = "sarif-output"
          New-Item -ItemType Directory -Path $sarifPath -Force | Out-Null
          $sarif = @{
            version = "2.1.0"
            runs = @(@{
              tool = @{
                driver = @{
                  name = "cscript.exe VBScript Syntax Checker"
                  informationUri = "https://learn.microsoft.com/en-us/previous-versions//d1wf56tt(v=vs.85)"
                  rules = @()
                }
              }
              results = @()
            })
          }

          $files = Get-Content vbscript-files.txt | Where-Object { Test-Path $_ }

          foreach ($file in $files) {
            Write-Host "üîç Checking: $file"

            $output = cmd /c "cscript.exe //nologo `"$file`"" 2>&1
            $exitCode = $LASTEXITCODE

            if ($exitCode -ne 0) {
              Write-Warning "‚ùå Syntax Error in $file"

              # Attempt to extract line number
              $lineNum = 1
              if ($output -match "line (\d+)" -or $output -match "Line:(\d+)") {
                $lineNum = [int]($matches[1])
              }

              # Heuristic severity
              $severity = if ($output -match "Expected|Syntax error|Invalid") {
                "error"
              } elseif ($output -match "unterminated|not defined") {
                "warning"
              } else {
                "note"
              }

              $sarif.runs[0].results += @{
                ruleId = "vbscript-syntax-error"
                level = $severity
                message = @{ text = $output.Trim() }
                locations = @(@{
                  physicalLocation = @{
                    artifactLocation = @{ uri = $file.Replace('\','/') }
                    region = @{ startLine = $lineNum }
                  }
                })
              }
            }
          }

          $sarif | ConvertTo-Json -Depth 10 | Set-Content "$sarifPath/vbscript-results.sarif" -Encoding UTF8

      - name: üì§ Upload SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vbscript-sarif-results
          path: repo/sarif-output/vbscript-results.sarif

      - name: üì° Publish SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: repo/sarif-output/vbscript-results.sarif
