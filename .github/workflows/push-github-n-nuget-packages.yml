name: Publish NuGet Package

on:
  push:
    branches: [main]
  release:
    types: [published, prerelease]

permissions:
  contents: write
  packages: write

jobs:
  publish-nuget:
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: üõ†Ô∏è Start Debug Info
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Working Directory Contents:"
          ls -laR
          echo "Checking Required Files:"
          for file in ITSMAndSysAdminTools.nuspec LICENSE README.md icon.png CHANGELOG.md; do
            test -f "$file" && echo "‚úÖ Found $file" || echo "‚ö†Ô∏è Missing $file"
          done
          echo "Validating Package Directories:"
          for dir in Core-ScriptLibrary BlueTeam-Tools SysAdmin-Tools ITSM-Templates-WKS ITSM-Templates-SVR; do
            [ -d "$dir" ] && echo "‚úÖ Found $dir" || echo "‚ö†Ô∏è Missing $dir"
          done

      - name: üì¶ Install Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y mono-complete xmlstarlet
          wget -O nuget.exe https://dist.nuget.org/win-x86-commandline/v6.11.0/nuget.exe
          chmod +x nuget.exe
          sudo mv nuget.exe /usr/local/bin/nuget
          mono /usr/local/bin/nuget help | head -n 1

      - name: üìÅ Prepare Package Files
        id: prepare
        run: |
          pkg="ITSMAndSysAdminTools"
          tmp="tmp-$pkg"
          nuspec="$pkg.nuspec"
          mkdir -p $tmp nupkg-out ReadmeCopies

          [ -f "$nuspec" ] || { echo "‚ùå Missing $nuspec"; echo "skip=true" >> "$GITHUB_OUTPUT"; exit 0; }
          cp "$nuspec" "$tmp/$nuspec"

          for dir in Core-ScriptLibrary BlueTeam-Tools SysAdmin-Tools ITSM-Templates-WKS ITSM-Templates-SVR; do
            [ -d "$dir" ] && cp -r "$dir" "$tmp/"
          done

          cp LICENSE "$tmp/LICENSE" 2>/dev/null || cp Core-ScriptLibrary/LICENSE "$tmp/LICENSE"
          cp README.md "ReadmeCopies/$pkg-README.md" 2>/dev/null || cp Core-ScriptLibrary/README.md "ReadmeCopies/$pkg-README.md"
          cp "ReadmeCopies/$pkg-README.md" "$tmp/$pkg-README.md"
          cp icon.png "$tmp/icon.png" 2>/dev/null || cp Core-ScriptLibrary/icon.png "$tmp/icon.png"

          echo "Validating .nuspec with xmlstarlet:"
          xmlstarlet val "$tmp/$nuspec" || { echo "‚ùå Invalid XML"; echo "skip=true" >> "$GITHUB_OUTPUT"; exit 0; }

          for field in id version authors description license projectUrl; do
            xmlstarlet sel -t -m "//metadata/$field" -v . "$tmp/$nuspec" >/dev/null || {
              echo "‚ùå Missing <$field> in $nuspec"
              echo "skip=true" >> "$GITHUB_OUTPUT"
              exit 0
            }
          done

          echo "Validating file paths in $nuspec"
          invalid=false
          grep -oP '<file\s+src="\K[^"]+' "$tmp/$nuspec" | while read -r src; do
            [ -e "$tmp/$src" ] || { echo "‚ùå Missing: $src"; invalid=true; }
          done
          $invalid && { echo "‚ùå Invalid paths"; echo "skip=true" >> "$GITHUB_OUTPUT"; exit 0; }

          echo "skip=false" >> "$GITHUB_OUTPUT"

      - name: üß† Enrich Nuspec Metadata
        if: steps.prepare.outputs.skip != 'true'
        run: |
          pkg="ITSMAndSysAdminTools"
          nuspec="tmp-$pkg/$pkg.nuspec"
          version=$(xmlstarlet sel -t -v "//metadata/version" "$nuspec")

          changelog=$(awk "/^## \\[$version\\]/,/^## \\[/" CHANGELOG.md | sed '1d;/^## \\[/d')
          link="[‚¨áÔ∏è Download artifacts](https://github.com/${{ github.repository }}/releases/download/$version/ITSMAndSysAdminTools.$version.nupkg)"
          changelog="${changelog}\n\n$link"
          sanitized=$(printf "%s" "$changelog" | sed ':a;N;$!ba;s/\n/\\n/g;s/"/\\"/g')

          xmlstarlet ed \
            -u "//metadata/releaseNotes" -v "$sanitized" \
            -s "//metadata[not(tags)]" -t elem -n "tags" -v "powershell itsm sysadmin security gpo automation enterprise activedirectory network wsus configuration sso ldap" \
            -s "//metadata[not(icon)]" -t elem -n "icon" -v "icon.png" \
            -s "//metadata[not(repository)]" -t elem -n "repository" -v "" \
            -s "//metadata/repository" -t attr -n "type" -v "git" \
            -s "//metadata/repository" -t attr -n "url" -v "https://github.com/${{ github.repository }}" \
            -s "//metadata/repository" -t attr -n "branch" -v "${{ github.ref_name }}" \
            -s "//metadata/repository" -t attr -n "commit" -v "${{ github.sha }}" \
            -s "//metadata[not(owners)]" -t elem -n "owners" -v "Luiz Hamilton Roberto da Silva" \
            -s "//metadata[not(requireLicenseAcceptance)]" -t elem -n "requireLicenseAcceptance" -v "false" \
            "$nuspec" > "$nuspec.tmp"
          mv "$nuspec.tmp" "$nuspec"

      - name: üì¶ Pack NuGet Package
        if: steps.prepare.outputs.skip != 'true'
        run: |
          pkg="ITSMAndSysAdminTools"
          cd "tmp-$pkg"
          mono /usr/local/bin/nuget pack "$pkg.nuspec" \
            -OutputDirectory ../nupkg-out \
            -Symbols -SymbolPackageFormat snupkg \
            -NonInteractive

      - name: üöÄ Push to GitHub Packages
        if: steps.prepare.outputs.skip != 'true' && (github.event_name == 'push' || github.event_name == 'release')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for f in nupkg-out/*.nupkg nupkg-out/*.snupkg; do
            [ -f "$f" ] && mono /usr/local/bin/nuget push "$f" \
              -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              -ApiKey "$GITHUB_TOKEN" \
              -NonInteractive -SkipDuplicate
          done

      - name: üöÄ Push to NuGet.org
        if: steps.prepare.outputs.skip != 'true' && (github.event_name == 'push' || github.event_name == 'release')
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          for f in nupkg-out/*.nupkg nupkg-out/*.snupkg; do
            [ -f "$f" ] && mono /usr/local/bin/nuget push "$f" \
              -Source "https://api.nuget.org/v3/index.json" \
              -ApiKey "$NUGET_API_KEY" \
              -NonInteractive -SkipDuplicate
          done

      - name: üè∑Ô∏è Create Git Tag
        if: steps.prepare.outputs.skip != 'true' && github.event_name == 'push'
        run: |
          version=$(xmlstarlet sel -t -v "//metadata/version" "tmp-ITSMAndSysAdminTools/ITSMAndSysAdminTools.nuspec")
          tag="ITSMAndSysAdminTools-v$version"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$tag"
          git push origin "$tag"

      - name: üßπ Cleanup
        if: always()
        run: |
          rm -rf tmp-ITSMAndSysAdminTools ReadmeCopies nupkg-out
