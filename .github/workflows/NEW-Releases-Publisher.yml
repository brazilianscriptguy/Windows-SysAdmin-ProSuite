name: Build and Release Specialized Packages

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

permissions:
  contents: write

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Configure GitHub CLI for Git Operations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Delete Older Releases for Managed Tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          MANAGED_TAGS=("BlueTeam-Tools" "Core-ScriptLibrary" "ITSM-Templates-SVR" "ITSM-Templates-WKS" "SysAdmin-Tools")
          for tag in "${MANAGED_TAGS[@]}"; do
            releases=$(gh release list --tag "$tag" --limit 100 --json name,tagName,createdAt | jq -r --arg tag "$tag" '.[] | select(.tagName == $tag) | "\(.createdAt) \(.tagName)"')
            if [ -z "$releases" ]; then continue; fi
            sorted_releases=$(echo "$releases" | sort)
            releases_to_delete=$(echo "$sorted_releases" | head -n -1 | awk '{print $2}')
            for old_tag in $releases_to_delete; do
              gh release delete "$old_tag" -y
              git push --delete origin "$old_tag"
            done
          done

  build-and-release:
    needs: cleanup-old-releases
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        release_name: ["BlueTeam-Tools", "Core-ScriptLibrary", "ITSM-Templates-SVR", "ITSM-Templates-WKS", "SysAdmin-Tools"]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh

      - name: Configure GitHub CLI for Git Operations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Handle Existing Release and Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ matrix.release_name }}"
          if gh release view "$TAG_NAME" > /dev/null 2>&1; then
            gh release delete "$TAG_NAME" -y
            git push --delete origin "$TAG_NAME"
          fi

      - name: Build and Package ${{ matrix.release_name }}
        env:
          RELEASE_NAME: ${{ matrix.release_name }}
        run: |
          case "$RELEASE_NAME" in
            BlueTeam-Tools)
              mkdir -p BlueTeam-Tools
              rsync -av Windows-SysAdmin-ProSuite/BlueTeam-Tools/ BlueTeam-Tools/
              cp Windows-SysAdmin-ProSuite/README.md BlueTeam-Tools/
              cp Windows-SysAdmin-ProSuite/LICENSE BlueTeam-Tools/
              mkdir -p artifacts
              zip -r artifacts/BlueTeam-Tools.zip BlueTeam-Tools
              ;;
            Core-ScriptLibrary)
              mkdir -p Core-ScriptLibrary
              rsync -av Windows-SysAdmin-ProSuite/Core-ScriptLibrary/ Core-ScriptLibrary/
              cp Windows-SysAdmin-ProSuite/README.md Core-ScriptLibrary/
              cp Windows-SysAdmin-ProSuite/LICENSE Core-ScriptLibrary/
              mkdir -p artifacts
              zip -r artifacts/Core-ScriptLibrary.zip Core-ScriptLibrary
              ;;
            ITSM-Templates-SVR)
              mkdir -p ITSM-Templates-SVR
              rsync -av Windows-SysAdmin-ProSuite/ITSM-Templates-SVR/ ITSM-Templates-SVR/
              cp Windows-SysAdmin-ProSuite/README.md ITSM-Templates-SVR/
              cp Windows-SysAdmin-ProSuite/LICENSE ITSM-Templates-SVR/
              mkdir -p artifacts
              zip -r artifacts/ITSM-Templates-SVR.zip ITSM-Templates-SVR
              ;;
            ITSM-Templates-WKS)
              mkdir -p ITSM-Templates-WKS
              rsync -av Windows-SysAdmin-ProSuite/ITSM-Templates-WKS/ ITSM-Templates-WKS/
              cp Windows-SysAdmin-ProSuite/README.md ITSM-Templates-WKS/
              cp Windows-SysAdmin-ProSuite/LICENSE ITSM-Templates-WKS/
              mkdir -p artifacts
              zip -r artifacts/ITSM-Templates-WKS.zip ITSM-Templates-WKS
              ;;
            SysAdmin-Tools)
              mkdir -p SysAdmin-Tools
              rsync -av Windows-SysAdmin-ProSuite/SysAdmin-Tools/ SysAdmin-Tools/
              cp Windows-SysAdmin-ProSuite/README.md SysAdmin-Tools/
              cp Windows-SysAdmin-ProSuite/LICENSE SysAdmin-Tools/
              mkdir -p artifacts
              zip -r artifacts/SysAdmin-Tools.zip SysAdmin-Tools
              ;;
          esac

      - name: Create New Release
        id: create_release
        uses: actions/create-release@v1.1.0
        with:
          tag_name: ${{ matrix.release_name }}
          release_name: ${{ matrix.release_name }}
          body: "Latest automated specialized release for ${{ matrix.release_name }}."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.release_name }}.zip
          asset_name: ${{ matrix.release_name }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
