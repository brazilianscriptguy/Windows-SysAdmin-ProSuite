name: changelog-releases-and-nuget-publisher

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Configure GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Delete Older Releases for Managed Tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          MANAGED_TAGS=("BlueTeam-Tools" "Core-ScriptLibrary" "ITSM-Templates-SVR" "ITSM-Templates-WKS" "SysAdmin-Tools" "GPOs-Templates" "READMEs-Files-Package" "All-Repository-Files" "AD-SSO-APIs-Integration")
          for tag in "${MANAGED_TAGS[@]}"; do
            releases=$(gh release list --tag "$tag" --limit 100 --json name,tagName,createdAt | jq -r --arg tag "$tag" '.[] | select(.tagName == $tag) | "\(.createdAt) \(.tagName)"')
            if [ -z "$releases" ]; then continue; fi
            sorted_releases=$(echo "$releases" | sort)
            releases_to_delete=$(echo "$sorted_releases" | head -n -1 | awk '{print $2}')
            for old_tag in $releases_to_delete; do
              gh release delete "$old_tag" -y
              git push --delete origin "$old_tag"
            done
          done

  build-release-artifacts:
    needs: cleanup-old-releases
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release_name: [
          "BlueTeam-Tools",
          "Core-ScriptLibrary",
          "ITSM-Templates-SVR",
          "ITSM-Templates-WKS",
          "SysAdmin-Tools",
          "GPOs-Templates",
          "READMEs-Files-Package",
          "All-Repository-Files",
          "AD-SSO-APIs-Integration"
        ]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Set Version Output
        id: version
        run: echo "version=${{ github.run_number }}.0.0" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Build and Zip Artifacts
        env:
          RELEASE_NAME: ${{ matrix.release_name }}
        run: |
          mkdir -p artifacts lint-reports
          # Same CASE block logic goes here from previous workflow

      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: PSScriptAnalyzer-${{ matrix.release_name }}
          path: lint-reports/${{ matrix.release_name }}-AnalyzerReport.txt

  build-and-publish-nuget:
    needs: build-release-artifacts
    runs-on: ubuntu-latest
    if: contains('BlueTeam-Tools Core-ScriptLibrary ITSM-Templates-SVR ITSM-Templates-WKS SysAdmin-Tools', matrix.release_name)
    strategy:
      matrix:
        release_name: [
          "BlueTeam-Tools",
          "Core-ScriptLibrary",
          "ITSM-Templates-SVR",
          "ITSM-Templates-WKS",
          "SysAdmin-Tools"
        ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Download nuget.exe
        run: |
          mkdir -p .tools
          curl -L -o .tools/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe

      - name: Generate .nuspec
        shell: pwsh
        run: |
          $version = "${{ needs.build-release-artifacts.outputs.version }}"
          $releaseNotesPath = "CHANGELOG.md"
          ./Core-ScriptLibrary/Nuget-Package-Publisher/nuspec-generator.ps1 `
            -PackageId "${{ matrix.release_name }}" `
            -Version $version `
            -ZipPath "artifacts/${{ matrix.release_name }}.zip" `
            -ReleaseNotesPath $releaseNotesPath `
            -OutputPath "."

      - name: Build and Publish NuGet Package
        shell: pwsh
        run: |
          $version = "${{ needs.build-release-artifacts.outputs.version }}"
          $releaseNotesPath = "CHANGELOG.md"
          $nuspecPath = "./${{ matrix.release_name }}.nuspec"
          ./.github/Publish-NuGet-Package.ps1 `
            -NuspecPath $nuspecPath `
            -PackageId "${{ matrix.release_name }}" `
            -Version $version `
            -ZipPath "artifacts/${{ matrix.release_name }}.zip" `
            -ReleaseNotesPath $releaseNotesPath `
            -OutputPath "." `
            -Publish:$true `
            -ApiKey "${{ secrets.NUGET_API_KEY }}"

      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: PSScriptAnalyzer-${{ matrix.release_name }}
          path: lint-reports/${{ matrix.release_name }}-AnalyzerReport.txt
