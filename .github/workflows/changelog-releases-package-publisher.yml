name: changelog-releases-package-publisher

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Configure GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Delete Older Releases for Managed Tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MANAGED_TAGS=("BlueTeam-Tools" "Core-ScriptLibrary" "ITSM-Templates-SVR" "ITSM-Templates-WKS" "SysAdmin-Tools" "GPOs-Templates" "READMEs-Files-Package" "All-Repository-Files" "AD-SSO-APIs-Integration")
          for tag in "${MANAGED_TAGS[@]}"; do
            releases=$(gh release list --limit 100 --json name,tagName,createdAt | jq -r --arg tag "$tag" '.[] | select(.tagName == $tag) | "\(.createdAt) \(.tagName)"')
            if [ -z "$releases" ]; then continue; fi
            sorted_releases=$(echo "$releases" | sort)
            releases_to_delete=$(echo "$sorted_releases" | head -n -1 | awk '{print $2}')
            for old_tag in $releases_to_delete; do
              gh release delete "$old_tag" -y
              git push --delete origin "$old_tag"
            done
          done

  build-and-release:
    needs: cleanup-old-releases
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release_name: [
          "BlueTeam-Tools",
          "Core-ScriptLibrary",
          "ITSM-Templates-SVR",
          "ITSM-Templates-WKS",
          "SysAdmin-Tools",
          "GPOs-Templates",
          "READMEs-Files-Package",
          "All-Repository-Files",
          "AD-SSO-APIs-Integration"
        ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Configure GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Build, Analyze and Package ${{ matrix.release_name }}
        env:
          RELEASE_NAME: ${{ matrix.release_name }}
        run: |
          set -e
          mkdir -p artifacts lint-reports

          case "$RELEASE_NAME" in
            BlueTeam-Tools | Core-ScriptLibrary | ITSM-Templates-SVR | ITSM-Templates-WKS | SysAdmin-Tools)
              cp -r "$RELEASE_NAME" "./temp-$RELEASE_NAME"
              cp README.md "./temp-$RELEASE_NAME/" || true
              cp LICENSE "./temp-$RELEASE_NAME/" || true
              pwsh -Command "
                Get-ChildItem -Recurse -Path './temp-$RELEASE_NAME' -Include *.ps1 |
                Invoke-ScriptAnalyzer -Recurse -Severity Warning,Error |
                Out-File 'lint-reports/$RELEASE_NAME-AnalyzerReport.txt' -Encoding utf8
              "
              zip -r "artifacts/$RELEASE_NAME.zip" "temp-$RELEASE_NAME"
              rm -rf "temp-$RELEASE_NAME"
              ;;

            AD-SSO-APIs-Integration)
              mkdir -p AD-SSO-APIs-Integration
              cp -r SysAdmin-Tools/ActiveDirectory-SSO-Integrations/* AD-SSO-APIs-Integration/
              cp README.md LICENSE AD-SSO-APIs-Integration/ || true
              pwsh -Command "
                Get-ChildItem -Recurse -Path './AD-SSO-APIs-Integration' -Include *.ps1 |
                Invoke-ScriptAnalyzer -Recurse -Severity Warning,Error |
                Out-File 'lint-reports/AD-SSO-APIs-Integration-AnalyzerReport.txt' -Encoding utf8
              "
              zip -r artifacts/AD-SSO-APIs-Integration.zip AD-SSO-APIs-Integration
              rm -rf AD-SSO-APIs-Integration
              ;;

            GPOs-Templates)
              mkdir -p GPOs-Templates
              cp -r SysAdmin-Tools/GroupPolicyObjects-Templates/* GPOs-Templates/
              cp SysAdmin-Tools/ActiveDirectory-Management/Export-n-Import-GPOsTool.ps1 GPOs-Templates/
              cp README.md LICENSE GPOs-Templates/ || true
              pwsh -Command "
                Get-ChildItem -Recurse -Path './GPOs-Templates' -Include *.ps1 |
                Invoke-ScriptAnalyzer -Recurse -Severity Warning,Error |
                Out-File 'lint-reports/GPOs-Templates-AnalyzerReport.txt' -Encoding utf8
              "
              zip -r artifacts/GPOs-Templates.zip GPOs-Templates
              rm -rf GPOs-Templates
              ;;

            READMEs-Files-Package)
              mkdir -p READMEs-Files-Package
              cp README.md READMEs-Files-Package/main-README.md || true
              find . -type f -iname "README.md" ! -path "./README.md" | while read -r file; do
                repo_dir=$(dirname "$file")
                repo_name=$(basename "$repo_dir")
                cp "$file" "READMEs-Files-Package/${repo_name}-README.md"
              done
              zip -r artifacts/READMEs-Files-Package.zip READMEs-Files-Package
              rm -rf READMEs-Files-Package
              ;;

            All-Repository-Files)
              mkdir -p All-Repository-Files
              for dir in BlueTeam-Tools Core-ScriptLibrary ITSM-Templates-SVR ITSM-Templates-WKS SysAdmin-Tools; do
                cp -r "$dir" All-Repository-Files/
              done
              cp README.md LICENSE All-Repository-Files/ || true
              zip -r artifacts/All-Repository-Files.zip All-Repository-Files
              rm -rf All-Repository-Files
              ;;
          esac

  publish-nuget:
    needs: build-and-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release_name: [
          "BlueTeam-Tools",
          "Core-ScriptLibrary",
          "ITSM-Templates-SVR",
          "ITSM-Templates-WKS",
          "SysAdmin-Tools"
        ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install PowerShell
        run: sudo apt-get install -y powershell

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

      - name: Generate .nuspec File
        shell: pwsh
        run: |
          $version = "${{ github.run_number }}.0.0"
          $releaseNotesPath = "CHANGELOG.md"
          ./.github/Publish-NuGet-Package.ps1 `
            -PackageId "${{ matrix.release_name }}" `
            -Version $version `
            -ZipPath "artifacts/${{ matrix.release_name }}.zip" `
            -ReleaseNotesPath $releaseNotesPath `
            -OutputPath "." `
            -Publish $true `
            -ApiKey "${{ secrets.NUGET_API_KEY }}"

      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: PSScriptAnalyzer-${{ matrix.release_name }}
          path: lint-reports/${{ matrix.release_name }}-AnalyzerReport.txt
