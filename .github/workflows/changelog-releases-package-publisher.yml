name: changelog-releases-and-nuget-publisher

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Configure GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Delete Older Releases for Managed Tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          MANAGED_TAGS=("BlueTeam-Tools" "Core-ScriptLibrary" "ITSM-Templates-SVR" "ITSM-Templates-WKS" "SysAdmin-Tools" "GPOs-Templates" "READMEs-Files-Package" "All-Repository-Files" "AD-SSO-APIs-Integration")
          for tag in "${MANAGED_TAGS[@]}"; do
            releases=$(gh release list --tag "$tag" --limit 100 --json name,tagName,createdAt | jq -r --arg tag "$tag" '.[] | select(.tagName == $tag) | "\(.createdAt) \(.tagName)"')
            if [ -z "$releases" ]; then continue; fi
            sorted_releases=$(echo "$releases" | sort)
            releases_to_delete=$(echo "$sorted_releases" | head -n -1 | awk '{print $2}')
            for old_tag in $releases_to_delete; do
              gh release delete "$old_tag" -y
              git push --delete origin "$old_tag"
            done
          done

  build-release-artifacts:
    needs: cleanup-old-releases
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release_name: [
          "BlueTeam-Tools",
          "Core-ScriptLibrary",
          "ITSM-Templates-SVR",
          "ITSM-Templates-WKS",
          "SysAdmin-Tools",
          "GPOs-Templates",
          "READMEs-Files-Package",
          "All-Repository-Files",
          "AD-SSO-APIs-Integration"
        ]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Set Version Output
        id: version
        run: echo "version=${{ github.run_number }}.0.0" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Build and Zip Artifacts
        env:
          RELEASE_NAME: ${{ matrix.release_name }}
        run: |
          mkdir -p artifacts lint-reports
          case "${{ matrix.release_name }}" in
            BlueTeam-Tools|Core-ScriptLibrary|ITSM-Templates-SVR|ITSM-Templates-WKS|SysAdmin-Tools)
              cp -r "${{ matrix.release_name }}" temp
              cp README.md LICENSE temp/ || true
              pwsh -Command "Get-ChildItem -Recurse -Path temp -Include *.ps1 | Invoke-ScriptAnalyzer -Recurse -Severity Warning,Error | Out-File 'lint-reports/${{ matrix.release_name }}-AnalyzerReport.txt' -Encoding utf8"
              zip -r "artifacts/${{ matrix.release_name }}.zip" temp
              rm -rf temp
              ;;
            AD-SSO-APIs-Integration)
              mkdir -p temp
              cp -r SysAdmin-Tools/ActiveDirectory-SSO-Integrations/* temp/
              cp README.md LICENSE temp/ || true
              pwsh -Command "Get-ChildItem -Recurse -Path temp -Include *.ps1 | Invoke-ScriptAnalyzer -Recurse -Severity Warning,Error | Out-File 'lint-reports/AD-SSO-APIs-Integration-AnalyzerReport.txt' -Encoding utf8"
              zip -r artifacts/AD-SSO-APIs-Integration.zip temp
              rm -rf temp
              ;;
            GPOs-Templates)
              mkdir -p temp
              cp -r SysAdmin-Tools/GroupPolicyObjects-Templates/* temp/
              cp SysAdmin-Tools/ActiveDirectory-Management/Export-n-Import-GPOsTool.ps1 temp/
              cp README.md LICENSE temp/ || true
              pwsh -Command "Get-ChildItem -Recurse -Path temp -Include *.ps1 | Invoke-ScriptAnalyzer -Recurse -Severity Warning,Error | Out-File 'lint-reports/GPOs-Templates-AnalyzerReport.txt' -Encoding utf8"
              zip -r artifacts/GPOs-Templates.zip temp
              rm -rf temp
              ;;
            READMEs-Files-Package)
              mkdir -p temp
              cp README.md temp/main-README.md || true
              find . -type f -iname "README.md" ! -path "./README.md" | while read -r f; do cp "$f" "temp/$(basename "$(dirname "$f")")-README.md"; done
              zip -r artifacts/READMEs-Files-Package.zip temp
              rm -rf temp
              ;;
            All-Repository-Files)
              mkdir -p temp
              for d in BlueTeam-Tools Core-ScriptLibrary ITSM-Templates-SVR ITSM-Templates-WKS SysAdmin-Tools; do cp -r "$d" temp/; done
              cp README.md LICENSE temp/ || true
              zip -r artifacts/All-Repository-Files.zip temp
              rm -rf temp
              ;;
          esac

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: artifacts/

      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: PSScriptAnalyzer-${{ matrix.release_name }}
          path: lint-reports/${{ matrix.release_name }}-AnalyzerReport.txt

  build-and-publish-nuget:
    needs: build-release-artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release_name: [
          "BlueTeam-Tools",
          "Core-ScriptLibrary",
          "ITSM-Templates-SVR",
          "ITSM-Templates-WKS",
          "SysAdmin-Tools"
        ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell curl unzip
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts

      - name: Generate .nuspec
        shell: pwsh
        run: |
          $version = "${{ needs.build-release-artifacts.outputs.version }}"
          $releaseNotesPath = "CHANGELOG.md"
          ./Core-ScriptLibrary/Nuget-Package-Publisher/nuspec-generator.ps1 `
            -PackageId "${{ matrix.release_name }}" `
            -Version $version `
            -ZipPath "artifacts/${{ matrix.release_name }}.zip" `
            -ReleaseNotesPath $releaseNotesPath `
            -OutputPath "."

      - name: Download nuget.exe
        run: |
          curl -L -o nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
          chmod +x nuget.exe

      - name: Pack NuGet Package
        run: mono ./nuget.exe pack "${{ matrix.release_name }}.nuspec" -OutputDirectory ./nupkg

      - name: Push to GitHub Packages
        run: |
          mono ./nuget.exe setApiKey ${{ secrets.GITHUB_TOKEN }} -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          mono ./nuget.exe push ./nupkg/*.nupkg -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Generate SHA256 (SysAdmin-Tools only)
        if: ${{ matrix.release_name == 'SysAdmin-Tools' }}
        run: sha256sum artifacts/SysAdmin-Tools.zip > artifacts/SysAdmin-Tools.zip.sha256

      - name: Extract Release Notes
        id: extract_notes
        run: |
          body=$(awk -v tag="## ${{ matrix.release_name }}" '$0==tag {f=1;next} /^## / && f{exit} f' CHANGELOG.md)
          echo "release_body<<EOF" >> $GITHUB_ENV
          echo "${body:-No release notes found.}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ matrix.release_name }}
          name: ${{ matrix.release_name }}
          body: ${{ env.release_body }}
          files: |
            artifacts/${{ matrix.release_name }}.zip
            artifacts/${{ matrix.release_name }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
