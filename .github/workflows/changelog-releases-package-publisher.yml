name: changelog-releases-and-nuget-publisher

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth setup-git

      - name: Delete Older Releases for Managed Tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MANAGED_TAGS=("BlueTeam-Tools" "Core-ScriptLibrary" "ITSM-Templates-SVR" "ITSM-Templates-WKS" "SysAdmin-Tools" "GPOs-Templates" "READMEs-Files-Package" "All-Repository-Files")
          for tag in "${MANAGED_TAGS[@]}"; do
            releases=$(gh release list --tag "$tag" --limit 100 --json name,tagName,createdAt | jq -r --arg tag "$tag" '.[] | select(.tagName == $tag) | "\(.createdAt) \(.tagName)"')
            if [ -z "$releases" ]; then continue; fi
            sorted_releases=$(echo "$releases" | sort)
            releases_to_delete=$(echo "$sorted_releases" | head -n -1 | awk '{print $2}')
            for old_tag in $releases_to_delete; do
              gh release delete "$old_tag" -y
              git push --delete origin "$old_tag"
            done
          done

  build-and-release:
    needs: cleanup-old-releases
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release_name: [
          "BlueTeam-Tools",
          "Core-ScriptLibrary",
          "ITSM-Templates-SVR",
          "ITSM-Templates-WKS",
          "SysAdmin-Tools",
          "GPOs-Templates",
          "READMEs-Files-Package",
          "All-Repository-Files"
        ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh powershell
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Prepare and Zip ${{ matrix.release_name }}
        env:
          RELEASE_NAME: ${{ matrix.release_name }}
        run: |
          mkdir -p artifacts lint-reports
          case "$RELEASE_NAME" in
            BlueTeam-Tools | Core-ScriptLibrary | ITSM-Templates-SVR | ITSM-Templates-WKS | SysAdmin-Tools)
              cp -r "$RELEASE_NAME" "temp"
              cp README.md LICENSE temp/ || true
              ;;
            GPOs-Templates)
              mkdir -p temp
              cp -r SysAdmin-Tools/GroupPolicyObjects-Templates/* temp/
              cp SysAdmin-Tools/ActiveDirectory-Management/Export-n-Import-GPOsTool.ps1 temp/
              cp README.md LICENSE temp/ || true
              ;;
            READMEs-Files-Package)
              mkdir -p temp
              cp README.md temp/main-README.md || true
              find . -type f -iname "README.md" ! -path "./README.md" | while read -r f; do cp "$f" "temp/$(basename "$(dirname "$f")")-README.md"; done
              ;;
            All-Repository-Files)
              mkdir -p temp
              for d in BlueTeam-Tools Core-ScriptLibrary ITSM-Templates-SVR ITSM-Templates-WKS SysAdmin-Tools; do cp -r "$d" temp/; done
              cp README.md LICENSE temp/ || true
              ;;
          esac

          pwsh -Command "Get-ChildItem -Recurse -Path temp -Include *.ps1 | Invoke-ScriptAnalyzer -Recurse -Severity Warning,Error | Out-File 'lint-reports/$RELEASE_NAME-AnalyzerReport.txt' -Encoding utf8"
          zip -r "artifacts/$RELEASE_NAME.zip" temp
          sha256sum "artifacts/$RELEASE_NAME.zip" > "artifacts/$RELEASE_NAME.zip.sha256"
          rm -rf temp

      - name: Extract Release Notes
        id: extract_notes
        run: |
          tag="${{ matrix.release_name }}"
          body=$(awk -v tag="## $tag" '$0 == tag {found=1; next} /^## / && found {exit} found {print}' CHANGELOG.md)
          echo "release_body<<EOF" >> $GITHUB_ENV
          echo "${body:-No changelog available for $tag.}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ matrix.release_name }}
          name: ${{ matrix.release_name }}
          body: ${{ env.release_body }}
          files: |
            artifacts/${{ matrix.release_name }}.zip
            artifacts/${{ matrix.release_name }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload PSScriptAnalyzer Report
        uses: actions/upload-artifact@v4
        with:
          name: PSScriptAnalyzer-${{ matrix.release_name }}
          path: lint-reports/${{ matrix.release_name }}-AnalyzerReport.txt

  build-and-publish-nuget:
    needs: build-and-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release_name: [
          "BlueTeam-Tools",
          "Core-ScriptLibrary",
          "ITSM-Templates-SVR",
          "ITSM-Templates-WKS",
          "SysAdmin-Tools"
        ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-${{ matrix.release_name }}
          path: ./artifacts

      - name: Generate .nuspec
        shell: pwsh
        run: |
          $version = "${{ github.run_number }}.0.0"
          ./Core-ScriptLibrary/Nuget-Package-Publisher/nuspec-generator.ps1 `
            -PackageId "${{ matrix.release_name }}" `
            -Version $version `
            -ZipPath "./artifacts/${{ matrix.release_name }}.zip" `
            -ReleaseNotesPath "CHANGELOG.md" `
            -OutputPath "."

      - name: Pack NuGet
        run: dotnet nuget pack "${{ matrix.release_name }}.nuspec" -OutputDirectory ./nupkg

      - name: Push to GitHub NuGet
        run: |
          dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --name github --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}
          dotnet nuget push "./nupkg/${{ matrix.release_name }}.*.nupkg" --source github --api-key ${{ secrets.GITHUB_TOKEN }}
