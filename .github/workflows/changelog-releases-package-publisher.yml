name: changelog-releases-and-nuget-publisher

on:
  workflow_dispatch:

env:
  DOTNET_ROOT: /usr/share/dotnet
  GH_PAT_FOR_NUGET: ${{ secrets.GH_PAT_FOR_NUGET }}
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: üßπ Delete old assets from releases
        run: |
          tags=("BlueTeam-Tools" "Core-ScriptLibrary" "ITSM-Templates-SVR" "ITSM-Templates-WKS" "SysAdmin-Tools" "GPOs-Templates" "READMEs-Files" "All-Repositories" "AD-SSO-API")
          for tag in "${tags[@]}"; do
            release_id=$(gh release view "$tag" --json id -q .id || echo "")
            if [ -z "$release_id" ]; then
              echo "Release $tag not found; skipping."
              continue
            fi
            assets=("ProSuite-$tag.zip" "ProSuite-$tag.zip.sha256" "$tag.zip" "$tag.zip.sha256")
            for asset in "${assets[@]}"; do
              asset_id=$(gh api repos/${{ github.repository }}/releases/$release_id/assets --jq ".[] | select(.name == \"$asset\") | .id")
              if [ -n "$asset_id" ]; then
                echo "Deleting $asset from release $tag"
                gh api -X DELETE repos/${{ github.repository }}/releases/assets/$asset_id
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - BlueTeam-Tools
          - Core-ScriptLibrary
          - ITSM-Templates-SVR
          - ITSM-Templates-WKS
          - SysAdmin-Tools
          - GPOs-Templates
          - READMEs-Files
          - All-Repositories
          - AD-SSO-API
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set release version
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Generate ProSuite Archive
        run: |
          mkdir -p output
          zip -r "output/ProSuite-${{ matrix.repo }}.zip" "./${{ matrix.repo }}/"
          sha256sum "output/ProSuite-${{ matrix.repo }}.zip" > "output/ProSuite-${{ matrix.repo }}.zip.sha256"

      - name: Generate Plain Archive
        run: |
          zip -r "output/${{ matrix.repo }}.zip" "./${{ matrix.repo }}/"
          sha256sum "output/${{ matrix.repo }}.zip" > "output/${{ matrix.repo }}.zip.sha256"

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ matrix.repo }}
          tag_name: ${{ matrix.repo }}
          files: |
            output/ProSuite-${{ matrix.repo }}.zip
            output/ProSuite-${{ matrix.repo }}.zip.sha256
            output/${{ matrix.repo }}.zip
            output/${{ matrix.repo }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish-nuget:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - BlueTeam-Tools
          - Core-ScriptLibrary
          - ITSM-Templates-SVR
          - ITSM-Templates-WKS
          - SysAdmin-Tools
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install NuGet CLI
        run: |
          mkdir -p .github/tools
          curl -sSL https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -o .github/tools/nuget.exe

      - name: Generate .nuspec file
        run: |
          $packageId = "${{ matrix.repo }}"
          $version = "${{ github.ref_name }}"
          $description = "Automated release of $packageId tools."
          $authors = "BrazilianScriptGuy"
          $projectUrl = "https://github.com/${{ github.repository }}"
          $outputPath = "./${packageId}.nuspec"

          $nuspec = @"
<?xml version="1.0"?>
<package >
  <metadata>
    <id>$packageId</id>
    <version>$version</version>
    <authors>$authors</authors>
    <description>$description</description>
    <projectUrl>$projectUrl</projectUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
  </metadata>
  <files>
    <file src="${packageId}\**\*" target="tools" />
  </files>
</package>
"@
          $nuspec | Out-File -Encoding utf8 -FilePath $outputPath
        shell: pwsh

      - name: üì¶ Pack NuGet package
        run: |
          mkdir -Force ./nupkg | Out-Null
          mono .github/tools/nuget.exe pack "${{ matrix.repo }}.nuspec" -OutputDirectory ./nupkg
        shell: bash

      - name: üì¶ Publish NuGet package
        run: |
          $ErrorActionPreference = 'Stop'
          $repoOwner = "brazilianscriptguy"
          $packageId = "${{ matrix.repo }}"
          $nupkgFile = Get-ChildItem "./nupkg/$packageId.*.nupkg" -ErrorAction SilentlyContinue | Select-Object -First 1

          if (-not $nupkgFile) {
            Write-Warning "‚ö†Ô∏è .nupkg not found. Skipping NuGet push for $packageId."
            exit 0
          }

          Write-Host "üì¶ Pushing to GitHub Packages..."
          ./.github/tools/nuget.exe push $nupkgFile.FullName `
            -Source "https://nuget.pkg.github.com/$repoOwner/index.json" `
            -ApiKey $env:GH_PAT_FOR_NUGET

          if ($env:NUGET_API_KEY -and $env:NUGET_API_KEY.Trim().Length -gt 0) {
            Write-Host "üì¶ Pushing to NuGet.org..."
            ./.github/tools/nuget.exe push $nupkgFile.FullName `
              -Source "https://api.nuget.org/v3/index.json" `
              -ApiKey $env:NUGET_API_KEY
          }
        shell: pwsh
        env:
          GH_PAT_FOR_NUGET: ${{ secrets.GH_PAT_FOR_NUGET }}
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
