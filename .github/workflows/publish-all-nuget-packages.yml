name: release-nuget-packages

on:
  release:
    types: [published]

jobs:
  publish-nuget:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package:
          - BlueTeam-Tools
          - Core-ScriptLibrary
          - ITSM-Templates-SVR
          - ITSM-Templates-WKS
          - SysAdmin-Tools

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: üì¶ Install mono
        run: sudo apt-get update && sudo apt-get install -y mono-complete

      - name: üì• Download nuget.exe
        run: |
          mkdir -p .github/tools
          curl -Ls -o .github/tools/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe

      - name: üìÅ Prepare and stage files
        run: |
          pkg="${{ matrix.package }}"
          mkdir -p ReadmeCopies
          mkdir -p nupkg-out
          mkdir -p "temp-$pkg"

          if [ ! -d "$pkg" ]; then
            echo "‚ùå Folder $pkg missing"
            exit 1
          fi
          cp -r "$pkg" "temp-$pkg/$pkg"
          cp "$pkg/README.md" "ReadmeCopies/$pkg-README.md"
          cp "$pkg.nuspec" "temp-$pkg/$pkg.nuspec"

      - name: üìñ Extract version and changelog
        id: changelog
        run: |
          pkg="${{ matrix.package }}"
          version=$(grep -m1 '<version>' "$pkg.nuspec" | sed -E 's/.*<version>(.+)<\/version>.*/\1/')
          echo "version=$version" >> "$GITHUB_OUTPUT"

          notes=$(awk "/^## \[$version\]/,/^## \[/" CHANGELOG.md | sed '1d;$d' || echo "No changelog found for $version")
          echo "notes<<EOF" >> "$GITHUB_OUTPUT"
          echo "$notes" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: üì¶ Pack NuGet package
        run: |
          pkg="${{ matrix.package }}"
          cd "temp-$pkg"
          mono ../.github/tools/nuget.exe pack "$pkg.nuspec" \
            -OutputDirectory ../nupkg-out \
            -Properties "ReadMeFile=ReadmeCopies/$pkg-README.md;SymbolPackageFormat=snupkg"
          cd ..

      - name: üöÄ Push to GitHub Packages
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pkg_path=$(find nupkg-out -name '*.nupkg' | head -n 1)
          mono .github/tools/nuget.exe push "$pkg_path" \
            -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -ApiKey "$GH_TOKEN" \
            -NonInteractive

          snupkg_path=$(find nupkg-out -name '*.snupkg' | head -n 1)
          if [ -n "$snupkg_path" ]; then
            mono .github/tools/nuget.exe push "$snupkg_path" \
              -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              -ApiKey "$GH_TOKEN" \
              -NonInteractive
          fi

      - name: üöÄ Push to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          pkg_path=$(find nupkg-out -name '*.nupkg' | head -n 1)
          mono .github/tools/nuget.exe push "$pkg_path" \
            -Source https://api.nuget.org/v3/index.json \
            -ApiKey "$NUGET_API_KEY" \
            -NonInteractive

          snupkg_path=$(find nupkg-out -name '*.snupkg' | head -n 1)
          if [ -n "$snupkg_path" ]; then
            mono .github/tools/nuget.exe push "$snupkg_path" \
              -Source https://api.nuget.org/v3/index.json \
              -ApiKey "$NUGET_API_KEY" \
              -NonInteractive
          fi

      - name: üè∑Ô∏è Create Git tag
        run: |
          version="${{ steps.changelog.outputs.version }}"
          tag="${{ matrix.package }}-v$version"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$tag"
          git push origin "$tag"

      - name: üßπ Clean up
        run: |
          rm -rf "temp-${{ matrix.package }}"
          rm -rf ReadmeCopies
          rm -rf nupkg-out
