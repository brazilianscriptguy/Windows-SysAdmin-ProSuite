name: Analyze PowerShell Scripts

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.ps1'
      - '.psscriptanalyzer'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.ps1'
      - '.psscriptanalyzer'
  workflow_dispatch:

jobs:
  psscriptanalyzer:
    name: PowerShell Code Quality Check
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      security-events: write
      statuses: write

    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: üîç Run PSScriptAnalyzer and Generate SARIF
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          # Install PSScriptAnalyzer
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -MinimumVersion 1.22.0
          $analyzerVersion = (Get-Module -ListAvailable PSScriptAnalyzer | Select-Object -First 1 -ExpandProperty Version)

          # Define analyzer settings
          $htPSA = @{
            Path = '.'
            Recurse = $true
            Severity = @('Error', 'Warning')
            IncludeRule = @(
              'PSAvoidUsingCmdletAliases',
              'PSUseShouldProcessForStateChangingFunctions',
              'PSAvoidUsingWriteHost',
              'PSUseConsistentIndentation',
              'PSUseConsistentWhitespace'
            )
            Settings = @{
              Rules = @{
                PSUseConsistentIndentation = @{
                  Enable = $true
                  IndentationSize = 4
                  PipelineIndentation = 'IncreaseIndentationForFirstPipeline'
                }
                PSUseConsistentWhitespace = @{
                  Enable = $true
                  CheckInnerBrace = $true
                  CheckOpenBrace = $true
                  CheckOpenParen = $true
                  CheckOperator = $true
                  CheckSeparator = $true
                }
              }
            }
          }

          $results = Invoke-ScriptAnalyzer @htPSA
          $sarifFile = "./psscriptanalyzer-results.sarif"

          if ($results) {
            # Try using ConvertTo-SARIF if available
            if (Get-Command ConvertTo-SARIF -ErrorAction SilentlyContinue) {
              $results | ConvertTo-SARIF -FilePath $sarifFile
            } else {
              # Manual SARIF generation
              $sarifResults = $results | ForEach-Object {
                $level = switch ($_.Severity.ToLowerInvariant()) {
                  'error'       { 'error' }
                  'warning'     { 'warning' }
                  'information' { 'note' }
                  default       { 'note' }
                }

                @{
                  ruleId = $_.RuleName
                  level = $level
                  message = @{ text = $_.Message }
                  locations = @(
                    @{
                      physicalLocation = @{
                        artifactLocation = @{ uri = $_.ScriptPath }
                        region = @{
                          startLine = $_.Line
                          startColumn = $_.Column
                        }
                      }
                    }
                  )
                }
              }

              $sarif = @{
                version = "2.1.0"
                runs = @(
                  @{
                    tool = @{
                      driver = @{
                        name = "PSScriptAnalyzer"
                        version = "$analyzerVersion"
                      }
                    }
                    results = $sarifResults
                  }
                )
              }

              $sarif | ConvertTo-Json -Depth 10 | Out-File -FilePath $sarifFile -Encoding utf8
            }
          } else {
            '{"version": "2.1.0", "runs": []}' | Out-File -FilePath $sarifFile -Encoding utf8
          }

      - name: üìä Upload Analysis Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: psscriptanalyzer-results
          path: ./psscriptanalyzer-results.sarif
          retention-days: 7

      - name: üì§ Upload SARIF to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./psscriptanalyzer-results.sarif
          wait-for-processing: true
